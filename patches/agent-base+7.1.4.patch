diff --git a/node_modules/agent-base/dist/index.d.ts b/node_modules/agent-base/dist/index.d.ts
index 3660ea7..da278a9 100644
--- a/node_modules/agent-base/dist/index.d.ts
+++ b/node_modules/agent-base/dist/index.d.ts
@@ -17,6 +17,10 @@ interface HttpsConnectOpts extends tls.ConnectionOptions {
     port: number;
 }
 export type AgentConnectOpts = HttpConnectOpts | HttpsConnectOpts;
+export type AgentGetNameOptions = {
+    protocol?: string;
+    port: number;
+}
 declare const INTERNAL: unique symbol;
 export declare abstract class Agent extends http.Agent {
     private [INTERNAL];
@@ -30,7 +34,7 @@ export declare abstract class Agent extends http.Agent {
     isSecureEndpoint(options?: AgentConnectOpts): boolean;
     private incrementSockets;
     private decrementSockets;
-    getName(options?: AgentConnectOpts): string;
+    getName(options?: AgentGetNameOptions): string;
     createSocket(req: http.ClientRequest, options: AgentConnectOpts, cb: (err: Error | null, s?: Duplex) => void): void;
     createConnection(): Duplex;
     get defaultPort(): number;
diff --git a/node_modules/agent-base/dist/index.d.ts~ b/node_modules/agent-base/dist/index.d.ts~
new file mode 100644
index 0000000..3660ea7
--- /dev/null
+++ b/node_modules/agent-base/dist/index.d.ts~
@@ -0,0 +1,41 @@
+/// <reference types="node" />
+/// <reference types="node" />
+/// <reference types="node" />
+/// <reference types="node" />
+import * as net from 'net';
+import * as tls from 'tls';
+import * as http from 'http';
+import type { Duplex } from 'stream';
+export * from './helpers';
+interface HttpConnectOpts extends net.TcpNetConnectOpts {
+    secureEndpoint: false;
+    protocol?: string;
+}
+interface HttpsConnectOpts extends tls.ConnectionOptions {
+    secureEndpoint: true;
+    protocol?: string;
+    port: number;
+}
+export type AgentConnectOpts = HttpConnectOpts | HttpsConnectOpts;
+declare const INTERNAL: unique symbol;
+export declare abstract class Agent extends http.Agent {
+    private [INTERNAL];
+    options: Partial<net.TcpNetConnectOpts & tls.ConnectionOptions>;
+    keepAlive: boolean;
+    constructor(opts?: http.AgentOptions);
+    abstract connect(req: http.ClientRequest, options: AgentConnectOpts): Promise<Duplex | http.Agent> | Duplex | http.Agent;
+    /**
+     * Determine whether this is an `http` or `https` request.
+     */
+    isSecureEndpoint(options?: AgentConnectOpts): boolean;
+    private incrementSockets;
+    private decrementSockets;
+    getName(options?: AgentConnectOpts): string;
+    createSocket(req: http.ClientRequest, options: AgentConnectOpts, cb: (err: Error | null, s?: Duplex) => void): void;
+    createConnection(): Duplex;
+    get defaultPort(): number;
+    set defaultPort(v: number);
+    get protocol(): string;
+    set protocol(v: string);
+}
+//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
